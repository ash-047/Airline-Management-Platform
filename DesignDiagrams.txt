Use case Diagram :

@startuml Airline Management System - Use Case Diagram
left to right direction
skinparam actorStyle awesome

actor "User" as USER
actor "Admin" as ADMIN
actor "System" as SYS

rectangle "Airline Management System" {
  usecase "Login" as UC1
  usecase "Search Flights" as UC2
  usecase "Book Tickets" as UC3
  usecase "Select Seats" as UC4
  usecase "Cancel Tickets" as UC5
  usecase "Ticket Payment" as UC6
  usecase "View Ticket Details" as UC7
  usecase "General Enquiries" as UC8
  usecase "Provide Flight Updates" as UC9
}

' User relationships
USER -- UC1
USER -- UC2
USER -- UC3
USER -- UC8
USER -- UC5
USER -- UC7

' Admin relationships
ADMIN -- UC1
ADMIN -- UC9
ADMIN -- UC7

' System relationships
SYS -- UC9

' Include/Extend relationships
UC3 ..> UC4 : <<includes>>
UC3 ..> UC6 : <<includes>>
UC5 ..> UC7 : <<extends>>
UC2 ..> UC7 : <<extends>>

@enduml

Class Diagram:

@startuml Airline Management System - Class Diagram

package "Model" {
  class User {
    -userId: String
    -username: String
    -password: String
    -email: String
    -phoneNumber: String
    +login(): boolean
    +register(): boolean
    +updateProfile(): boolean
  }
  
  class Customer extends User {
    -bookingHistory: List<Booking>
    +searchFlights(criteria: SearchCriteria): List<Flight>
    +bookTicket(flight: Flight): Booking
    +cancelTicket(booking: Booking): boolean
    +viewTicketDetails(bookingId: String): Booking
  }
  
  class Admin extends User {
    -adminRole: String
    +updateFlightInfo(flight: Flight): boolean
    +generateReports(): Report
    +provideFlightUpdates(flight: Flight, update: String): boolean
  }
  
  class Flight {
    -flightId: String
    -flightNumber: String
    -source: Airport
    -destination: Airport
    -departureTime: DateTime
    -arrivalTime: DateTime
    -status: FlightStatus
    -availableSeats: Map<SeatCategory, Integer>
    -price: Map<SeatCategory, Double>
    +getAvailableSeats(): int
    +updateStatus(status: FlightStatus): void
  }
  
  class Booking {
    -bookingId: String
    -flight: Flight
    -customer: Customer
    -seats: List<Seat>
    -bookingDate: DateTime
    -status: BookingStatus
    -totalAmount: double
    -paymentStatus: PaymentStatus
    +calculateFare(): double
    +confirmBooking(): boolean
    +cancelBooking(): boolean
    +generateTicket(): Ticket
  }
  
  class Seat {
    -seatNumber: String
    -category: SeatCategory
    -price: double
    -isBooked: boolean
    +book(): boolean
    +unbook(): boolean
  }
  
  class Airport {
    -code: String
    -name: String
    -city: String
    -country: String
  }
  
  class Payment {
    -paymentId: String
    -booking: Booking
    -amount: double
    -paymentMethod: PaymentMethod
    -paymentDate: DateTime
    -status: PaymentStatus
    +processPayment(): boolean
    +generateReceipt(): Receipt
  }
  
  class Ticket {
    -ticketId: String
    -booking: Booking
    -passengerName: String
    -seatNumber: String
    -boardingTime: DateTime
    -gate: String
    -status: TicketStatus
    +displayTicket(): void
    +cancelTicket(): boolean
  }
  
  enum FlightStatus {
    SCHEDULED
    DELAYED
    BOARDING
    IN_AIR
    LANDED
    CANCELLED
  }
  
  enum BookingStatus {
    PENDING
    CONFIRMED
    CANCELLED
  }
  
  enum SeatCategory {
    ECONOMY
    BUSINESS
    FIRST_CLASS
  }
  
  enum PaymentStatus {
    PENDING
    COMPLETED
    FAILED
    REFUNDED
  }
  
  enum PaymentMethod {
    CREDIT_CARD
    DEBIT_CARD
    NET_BANKING
    WALLET
  }
  
  enum TicketStatus {
    VALID
    CHECKED_IN
    USED
    CANCELLED
  }
}

package "View" {
  class LoginView
  class FlightSearchView
  class BookingView
  class SeatSelectionView
  class PaymentView
  class TicketView
  class BookingHistoryView
  class AdminDashboardView
}

package "Controller" {
  class UserController {
    +authenticateUser(username: String, password: String): User
    +registerUser(userData: Map<String, String>): boolean
  }
  
  class FlightController {
    +searchFlights(source: String, destination: String, date: Date): List<Flight>
    +getFlightDetails(flightId: String): Flight
    +updateFlightStatus(flightId: String, status: FlightStatus): boolean
  }
  
  class BookingController {
    +createBooking(customerId: String, flightId: String): Booking
    +selectSeats(bookingId: String, seatNumbers: List<String>): boolean
    +confirmBooking(bookingId: String): boolean
    +cancelBooking(bookingId: String): boolean
    +getBookingDetails(bookingId: String): Booking
  }
  
  class PaymentController {
    +processPayment(bookingId: String, paymentMethod: PaymentMethod): boolean
    +verifyPayment(paymentId: String): boolean
    +initiateRefund(bookingId: String): boolean
  }
}

' Relationships
Customer "1" -- "*" Booking : makes
Booking "*" -- "1" Flight : for
Booking "1" -- "1" Payment : has
Booking "1" -- "*" Ticket : generates
Flight "*" -- "2" Airport : connects
Booking "*" -- "*" Seat : includes
User <|-- Customer
User <|-- Admin

' MVC Relationships
UserController -- LoginView
UserController -- User
FlightController -- FlightSearchView
FlightController -- Flight
BookingController -- BookingView
BookingController -- SeatSelectionView
BookingController -- BookingHistoryView
BookingController -- Booking
PaymentController -- PaymentView
PaymentController -- Payment

@enduml

State Diagram:

@startuml Airline Management System - State Diagram

title Booking State Diagram

[*] --> Initiated : User searches flights

state Initiated {
  [*] --> FlightSelected : User selects flight
  FlightSelected --> SeatSelection : User proceeds to seat selection
  SeatSelection --> PaymentPending : Seats selected
}

Initiated --> PaymentPending : Proceed to payment
PaymentPending --> Confirmed : Payment successful
PaymentPending --> Cancelled : Payment failed/timeout

state Confirmed {
  [*] --> Active : Booking confirmed
  Active --> CheckedIn : User checks in
}

Confirmed --> Cancelled : User cancels booking
Cancelled --> [*] : Refund processed (if applicable)
CheckedIn --> Completed : Flight completed
Completed --> [*] : Journey ended

@enduml

Activity Diagram:

@startuml Airline Management System - Activity Diagram

|User|
start
:Login to system;
:Search for flights;
:Select flight;

|System|
:Display available flights;
:Show seat map;

|User|
:Select seats;
:Enter passenger details;

|System|
:Calculate fare;
:Generate booking summary;

|User|
:Review booking details;
:Proceed to payment;
:Select payment method;

|System|
:Process payment;
if (Payment successful?) then (yes)
  :Generate ticket;
  :Send confirmation email;
else (no)
  :Display payment error;
  stop
endif

|User|
:View ticket details;
:Download ticket;
if (Want to cancel?) then (yes)
  :Request cancellation;
  |System|
  :Process cancellation;
  :Initiate refund;
  |User|
  :Receive cancellation confirmation;
else (no)
endif

|Admin|
:Login to admin panel;
:Monitor flight bookings;
if (Flight status changed?) then (yes)
  :Update flight status;
  |System|
  :Notify affected users;
  :Update flight information;
else (no)
endif
:View booking reports;
:Handle general enquiries;

|System|
:Generate statistics;
:Update system status;

stop

@enduml